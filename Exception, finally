EXCEPTIONS
-try:code that gets tested for erros while being executed
-catch:code that can be executed if error in try block occurs
public class Main {
  public static void main(String[ ] args) {
    try {
      int[] myNumbers = {1, 2, 3};
      System.out.println(myNumbers[10]);
    } catch (Exception e) {
      System.out.println("Something went wrong.");
    }
  }
}

FINALLY
-execute code ater try...catch regardless of result
public class Main {
  public static void main(String[] args) {
    try {
      int[] myNumbers = {1, 2, 3};
      System.out.println(myNumbers[10]);
    } catch (Exception e) {
      System.out.println("Something went wrong.");
    } finally {
      System.out.println("The 'try catch' is finished.");
    }
  }
}
VORLESUNG BEISPIEL
import java.util.InputMismatchException;
import java.util.Scanner;

public class exceptionsstuff {
	
	public static void main(String[] args) {
		//exception Fehler welcher 
		//waehrend laufzeit eines Programm auftritt:)
		Scanner scanner = new Scanner(System.in);
		try {
			int number = scanner.nextInt();
			System.out.println(number);
			
		}catch (InputMismatchException exception) {
			System.out.println("Das war ein falscher Wert");
		} finally { //wird immer ausgefuehrt
			scanner.close();
			System.out.println("Scanner geschlossen");
			
		}
		
		
}
	
	public class exceptionthrower{
		public void divide() {
			Scanner scan = new Scanner(System.in)
			System.out.println("Bitte geben Sie eine Zahl ein: ");
		    int number = scan.nextInt();
		    
		    if (number==0) {
		    	throw new ArithmeticException("Nicht durch 0 teilen!");
		    }
		    
		    System.out.println(10/number);
		    
		}
	}
	 in Main schreiben:
		 exceptionthrower exceptionthrower = new exceptionthrower();
	 	 exceptionthrower.divide();
		 try {
			exceptionthrower.divide();
		}catch (ArithmeticException exception) {
			System.out.println(exception,getMessage());}
