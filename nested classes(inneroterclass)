Beispiel
public class innerouterclass {

	
	class OuterClass{
		private int outerNumber;
		private InnerClass innerclass;
		
		class InnerClass{
			int innerNumber;
			public InnerClass(int number) {
				innerNumber=number;
				innerClass=this;
			}
			private void innerMethod1() {
				System.out.println("outerNumber="+outerNumber);
				System.out.println("innerNumber="+innerNumber);
			}
		}
		
		public OuterClass(int number) {
			outerNumber=number;
		}
		public void outerMethod() {
			System.out.println("outerNumber="+outerNumber);
			innerClass.innerMethod1();
		}
	}
	
	in main 
	OuterClass outer1 = newOuterClass(1);
	OuterClass.InnerClass
		inner1 = outer1.new Innerclass(11);
	outer1.outerMethod();
	
	Outerclass outer2 = new OuterClass(2);
	OuterClass.InnerClass
		inner2 = outer2.new InnerClass(22);
	outer2.outerMethod();
	
}


PRIVATE INNER CLASS
-private or protected

class OuterClass {
  int x = 10;

  private class InnerClass {
    int y = 5;
  }
}

public class Main {
  public static void main(String[] args) {
    OuterClass myOuter = new OuterClass();
    OuterClass.InnerClass myInner = myOuter.new InnerClass();
    System.out.println(myInner.y + myOuter.x);
  }
}
=========================================================
STATIC INNER CLASS
class OuterClass {
  int x = 10;

  static class InnerClass {
    int y = 5;
  }
}

public class Main {
  public static void main(String[] args) {
    OuterClass.InnerClass myInner = new OuterClass.InnerClass();
    System.out.println(myInner.y);
  }
}
========================================================
ACCESS OUTER CLASS FROM INNER CLASS
 class OuterClass {
  int x = 10;

  class InnerClass {
    public int myInnerMethod() {
      return x;
    }
  }
}

public class Main {
  public static void main(String[] args) {
    OuterClass myOuter = new OuterClass();
    OuterClass.InnerClass myInner = myOuter.new InnerClass();
    System.out.println(myInner.myInnerMethod());
  }
}


