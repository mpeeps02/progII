KLASSEN UND OBJEKTE
-creating multiple objects in one class
===================================
BEISPIEL VORLESUNG

public class Arbeitskraft {
//Attribute
    private String personalnr;
    private String name;
    private int gehalt;
    private String abteilung;
    
  public Arbeitskraft(String nr, String name, int gehalt) {
   
     this.personalnr=nr;
     this.name=name;
     this.gehalt=gehalt;
} 
//Methoden,void ist r√ºckgabetyp
public void erhoeheGehalt(int gehaltserhoehung) {
  this.gehalt = this.gehalt+gehaltserhoehung;
}
public void versetzeInAbteilung(String neueAbteilung) {
  this.abteilung=neueAbteilung;
}
public String druckeAusweis() {
  String ausgabeString = this.personalnr + ", "+this.name+", "+this.abteilung;
  return ausgabeString;
}
}
============================================
MODIFY ATTRIBUTES
public class Main {
  int x;

  public static void main(String[] args) {
    Main myObj = new Main();
    myObj.x = 40;
    System.out.println(myObj.x);
  }
}
===============================================
MULTIPLE ATTRIBUTES
public class Main {
  String fname = "John";
  String lname = "Doe";
  int age = 24;

  public static void main(String[] args) {
    Main myObj = new Main();
    System.out.println("Name: " + myObj.fname + " " + myObj.lname);
    System.out.println("Age: " + myObj.age);
  }
}

ENUMS //special "class" that represents a group of constants (unchangeable variables, like final variables)
enum Level {
  LOW,
  MEDIUM,
  HIGH
}
Level myVar = Level.MEDIUM;//access

ENUM INSIDE A CLASS
public class Main {
  enum Level {
    LOW,
    MEDIUM,
    HIGH
  }

  public static void main(String[] args) {
    Level myVar = Level.MEDIUM; 
    System.out.println(myVar);
  }
}
================================================================0
LOOPING THROUGH AN ENUM
for (Level myVar : Level.values()) {
  System.out.println(myVar);
}
============================================================
STATIC VS NON-STATIC
-static: accessed without creating an object of the class
-public: only access by objects

public class Main {
  // Static method
  static void myStaticMethod() {
    System.out.println("Static methods can be called without creating objects");
  }

  // Public method
  public void myPublicMethod() {
    System.out.println("Public methods must be called by creating objects");
  }

  // Main method
  public static void main(String[] args) {
    myStaticMethod(); // Call the static method
    // myPublicMethod(); This would compile an error

    Main myObj = new Main(); // Create an object of Main
    myObj.myPublicMethod(); // Call the public method on the object
  }
}

ACCESS METHODS WITH AN OBJECT
public class Main {
 
  // Create a fullThrottle() method
  public void fullThrottle() {
    System.out.println("The car is going as fast as it can!");
  }

  // Create a speed() method and add a parameter
  public void speed(int maxSpeed) {
    System.out.println("Max speed is: " + maxSpeed);
  }

  // Inside main, call the methods on the myCar object
  public static void main(String[] args) {
    Main myCar = new Main();   // Create a myCar object
    myCar.fullThrottle();      // Call the fullThrottle() method
    myCar.speed(200);          // Call the speed() method
  }
}

// The car is going as fast as it can!
// Max speed is: 200

FINAL
- this excludes the ability to override existing atrribute values
public class Main {
  final int x = 10;
  final double PI = 3.14;

  public static void main(String[] args) {
    Main myObj = new Main();
    myObj.x = 50; // will generate an error: cannot assign a value to a final variable
    myObj.PI = 25; // will generate an error: cannot assign a value to a final variable
    System.out.println(myObj.x);
  }
}

EXTENDS
//Car class (subclass) inherits the attributes and methods from the Vehicle class (superclass):
class Vehicle {
  protected String brand = "Ford";         // Vehicle attribute
  public void honk() {                     // Vehicle method
    System.out.println("Tuut, tuut!");
  }
}

class Car extends Vehicle {
  private String modelName = "Mustang";    // Car attribute
  public static void main(String[] args) {

    // Create a myCar object
    Car myCar = new Car();

    // Call the honk() method (from the Vehicle class) on the myCar object
    myCar.honk();

    // Display the value of the brand attribute (from the Vehicle class) and the value of the modelName from the Car class
    System.out.println(myCar.brand + " " + myCar.modelName);
  }
}

