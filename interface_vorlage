public class interfaces_zsmfsg {
//allgemein spezielle Art der Java Klasse 
//	nur Megthodenkoepfe und Konstanten werden festgelegt
//ermöglicht Übernahme verschiedenerer Methoden in verschiedene Klassen
//ermoeglicht mehrfachvererbung
	//immer abstract
	public interface X{
		public boolean b = true;
		//Methodenkopf
		public abstract void addition();
		//--> rest dort wo methode implementiert wird class zahl
	}
	//////////////////////////////////////////
	public class Zahl implements X{
		private int a;
		private int b;

		public void addition() {
			System.out.println("du fuehrst eine addiiton aus");
		}
		}
	}
}

==================================================

INTERFACE

// Interface
interface Animal {
  public void animalSound(); // interface method (does not have a body)
  public void sleep(); // interface method (does not have a body)
}

// Pig "implements" the Animal interface
class Pig IMPLEMENTS Animal {
  public void animalSound() {
    // The body of animalSound() is provided here
    System.out.println("The pig says: wee wee");
  }
  @Ovveride
  public void sleep() {
    // The body of sleep() is provided here
    System.out.println("Zzz");
  }
}

class Main {
  public static void main(String[] args) {
    Pig myPig = new Pig();  // Create a Pig object
    myPig.animalSound();
    myPig.sleep();
  }
}
=======================================================
COMPARE TO INTERFACE
public class Fahrzeug implements Comparable<Fahrzeug> {
 
  public int id;
  public double gewicht;
  public String beschreibung;
  
  public Fahrzeug(int id, double gewicht, String beschreibung) {
  this.id=id;
  this.gewicht=gewicht;
  this.beschreibung=beschreibung;
  }
  public String toString() {
    return "["+ id +", " + gewicht +", "  + beschreibung +"]";
  }
  @Override
  public int compareTo (Fahrzeug fahrzeug) {
    if(gewicht == fahrzeug.gewicht) {
      return 0;
    }else if (gewicht > fahrzeug.gewicht) {
      return 1;
      
    }else {
      return -1;
    
  }
  }
}
Collections.sort(fahrzeugliste); //funktioniert nicht ohne Interface
==============================================================
MULTIPLE INTERFACES
interface FirstInterface {
  public void myMethod(); // interface method
}

interface SecondInterface {
  public void myOtherMethod(); // interface method
}

class DemoClass implements FirstInterface, SecondInterface {
  public void myMethod() {
    System.out.println("Some text..");
  }
  public void myOtherMethod() {
    System.out.println("Some other text...");
  }
}

class Main {
  public static void main(String[] args) {
    DemoClass myObj = new DemoClass();
    myObj.myMethod();
    myObj.myOtherMethod();
  }
}
